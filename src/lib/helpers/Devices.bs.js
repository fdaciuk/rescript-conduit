// Generated by ReScript, PLEASE EDIT WITH CARE

import * as ReactUse from "react-use";
import * as MediaHelpers from "./js/media-helpers";

function maxWidth(prim0, prim1) {
  return MediaHelpers.maxWidth(prim0, prim1);
}

function minWidth(prim0, prim1) {
  return MediaHelpers.minWidth(prim0, prim1);
}

var empty = {};

function valueOfDevice(value) {
  if (value === "md") {
    return "960px";
  } else if (value === "sm") {
    return "600px";
  } else if (value === "xl") {
    return "1920px";
  } else if (value === "xs") {
    return "470px";
  } else if (value === "xxs") {
    return "0px";
  } else {
    return "1280px";
  }
}

function lessThan(values, device, styles) {
  return Object.assign(values, MediaHelpers.maxWidth(valueOfDevice(device), styles));
}

function greaterThan(values, device, styles) {
  return Object.assign(values, MediaHelpers.minWidth(valueOfDevice(device), styles));
}

function xxs(__x) {
  return function (param) {
    return lessThan(__x, "xs", param);
  };
}

function xs(__x) {
  return function (param) {
    return lessThan(__x, "sm", param);
  };
}

function sm(__x) {
  return function (param) {
    return lessThan(__x, "md", param);
  };
}

function md(__x) {
  return function (param) {
    return lessThan(__x, "lg", param);
  };
}

function lg(__x) {
  return function (param) {
    return lessThan(__x, "xl", param);
  };
}

function xl(__x) {
  return function (param) {
    return greaterThan(__x, "xl", param);
  };
}

function greaterThan$1(current, device, styles) {
  return "\n  " + current + "\n  @media (min-width: " + valueOfDevice(device) + ") {\n    " + styles + "\n  }\n  ";
}

function lessThan$1(current, device, styles) {
  return "\n  " + current + "\n  @media (max-width: " + valueOfDevice(device) + ") {\n    " + styles + "\n  }\n  ";
}

var Raw = {
  greaterThan: greaterThan$1,
  lessThan: lessThan$1
};

function createMatchMedia(device) {
  return "(min-width: " + valueOfDevice(device) + ")";
}

function useDevice(param) {
  var xxs = ReactUse.useMedia(createMatchMedia("xxs"), true);
  var xs = ReactUse.useMedia(createMatchMedia("xs"), true);
  var sm = ReactUse.useMedia(createMatchMedia("sm"), true);
  var md = ReactUse.useMedia(createMatchMedia("md"), true);
  var lg = ReactUse.useMedia(createMatchMedia("lg"), false);
  var xl = ReactUse.useMedia(createMatchMedia("xl"), false);
  var device;
  var exit = 0;
  var exit$1 = 0;
  var exit$2 = 0;
  var exit$3 = 0;
  if (xxs && !xs) {
    if (sm) {
      exit$2 = 3;
    } else if (md) {
      exit$1 = 2;
    } else if (lg) {
      exit = 1;
    } else {
      device = xl ? "xl" : "xxs";
    }
  } else {
    exit$3 = 4;
  }
  if (exit$3 === 4) {
    if (xs && !sm) {
      if (md) {
        exit$1 = 2;
      } else if (lg) {
        exit = 1;
      } else {
        device = xl ? (
            xl ? "xl" : "xxs"
          ) : "xs";
      }
    } else {
      exit$2 = 3;
    }
  }
  if (exit$2 === 3) {
    if (sm && !md) {
      if (lg) {
        exit = 1;
      } else {
        device = xl ? (
            xl ? "xl" : "xxs"
          ) : "sm";
      }
    } else {
      exit$1 = 2;
    }
  }
  if (exit$1 === 2) {
    if (md && !lg) {
      device = xl ? (
          xl ? "xl" : "xxs"
        ) : "md";
    } else {
      exit = 1;
    }
  }
  if (exit === 1) {
    device = lg ? (
        xl ? (
            xl ? "xl" : "xxs"
          ) : "lg"
      ) : (
        xl ? "xl" : "xxs"
      );
  }
  return [
          device,
          {
            xxs: xxs,
            xs: xs,
            sm: sm,
            md: md,
            lg: lg,
            xl: xl
          }
        ];
}

export {
  maxWidth ,
  minWidth ,
  empty ,
  valueOfDevice ,
  lessThan ,
  greaterThan ,
  xxs ,
  xs ,
  sm ,
  md ,
  lg ,
  xl ,
  Raw ,
  createMatchMedia ,
  useDevice ,
  
}
/* react-use Not a pure module */
