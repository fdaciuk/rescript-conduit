// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Devices from "../helpers/Devices.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as UIResponsiveProps from "./UIResponsiveProps.bs.js";

function parseRecord(stringify, record, value) {
  var variant = value.NAME;
  if (variant === "md") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: Curry._1(stringify, value.VAL),
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "sm") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: Curry._1(stringify, value.VAL),
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "xl") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: Curry._1(stringify, value.VAL)
          };
  } else if (variant === "xs") {
    return {
            xxs: record.xxs,
            xs: Curry._1(stringify, value.VAL),
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "xxs") {
    return {
            xxs: Curry._1(stringify, value.VAL),
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: Curry._1(stringify, value.VAL),
            xl: record.xl
          };
  }
}

function toRecord(values, stringify) {
  if (values !== undefined) {
    return Belt_Array.reduce(values, UIResponsiveProps.empty, (function (param, param$1) {
                  return parseRecord(stringify, param, param$1);
                }));
  } else {
    return UIResponsiveProps.empty;
  }
}

function valueByDevice(record, device) {
  if (device === "md") {
    return record.md;
  } else if (device === "sm") {
    return record.sm;
  } else if (device === "xl") {
    return record.xl;
  } else if (device === "xs") {
    return record.xs;
  } else if (device === "xxs") {
    return record.xxs;
  } else {
    return record.lg;
  }
}

function createStyles(values, device) {
  return Belt_Array.reduce(values, "", (function (styles, param) {
                var key = param[0];
                return Belt_Option.getWithDefault(Belt_Option.map(valueByDevice(param[1], device), (function (value) {
                                  return "\n      " + styles + "\n      " + key + ": " + value + ";\n      ";
                                })), styles);
              }));
}

function make(display, justifyContent, flexDirection, alignItems, p, px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr, textAlign, width, height, position, top, bottom, left, right, param) {
  var values = [
    [
      "display",
      toRecord(display, (function (prim) {
              return prim;
            }))
    ],
    [
      "justify-content",
      toRecord(justifyContent, (function (prim) {
              return prim;
            }))
    ],
    [
      "align-items",
      toRecord(alignItems, (function (prim) {
              return prim;
            }))
    ],
    [
      "flex-direction",
      toRecord(flexDirection, (function (prim) {
              return prim;
            }))
    ],
    [
      "padding",
      toRecord(p, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-left",
      toRecord(px, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-right",
      toRecord(px, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-top",
      toRecord(py, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-bottom",
      toRecord(py, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-top",
      toRecord(pt, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-bottom",
      toRecord(pb, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-left",
      toRecord(pl, UIResponsiveProps.stringifySpacing)
    ],
    [
      "padding-right",
      toRecord(pr, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin",
      toRecord(m, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-left",
      toRecord(mx, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-right",
      toRecord(mx, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-top",
      toRecord(my, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-bottom",
      toRecord(my, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-top",
      toRecord(mt, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-bottom",
      toRecord(mb, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-left",
      toRecord(ml, UIResponsiveProps.stringifySpacing)
    ],
    [
      "margin-right",
      toRecord(mr, UIResponsiveProps.stringifySpacing)
    ],
    [
      "text-align",
      toRecord(textAlign, (function (prim) {
              return prim;
            }))
    ],
    [
      "width",
      toRecord(width, UIResponsiveProps.stringifySize)
    ],
    [
      "height",
      toRecord(height, UIResponsiveProps.stringifySize)
    ],
    [
      "position",
      toRecord(position, (function (prim) {
              return prim;
            }))
    ],
    [
      "top",
      toRecord(top, UIResponsiveProps.stringifySize)
    ],
    [
      "bottom",
      toRecord(bottom, UIResponsiveProps.stringifySize)
    ],
    [
      "left",
      toRecord(left, UIResponsiveProps.stringifySize)
    ],
    [
      "right",
      toRecord(right, UIResponsiveProps.stringifySize)
    ]
  ];
  var xxsStyles = createStyles(values, "xxs");
  var xsStyles = createStyles(values, "xs");
  var smStyles = createStyles(values, "sm");
  var mdStyles = createStyles(values, "md");
  var lgStyles = createStyles(values, "lg");
  var xlStyles = createStyles(values, "xl");
  return Devices.Raw.greaterThan(Devices.Raw.greaterThan(Devices.Raw.greaterThan(Devices.Raw.greaterThan(Devices.Raw.greaterThan(Devices.Raw.greaterThan("", "xxs", xxsStyles), "xs", xsStyles), "sm", smStyles), "md", mdStyles), "lg", lgStyles), "xl", xlStyles);
}

var $$Option;

export {
  $$Option ,
  parseRecord ,
  toRecord ,
  valueByDevice ,
  createStyles ,
  make ,
  
}
/* Devices Not a pure module */
